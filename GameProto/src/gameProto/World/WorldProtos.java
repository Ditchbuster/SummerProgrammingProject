// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: World.proto

package gameProto.World;

public final class WorldProtos {
  private WorldProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface ChunkOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required int32 id = 1;
    boolean hasId();
    int getId();
    
    // optional int32 x = 2;
    boolean hasX();
    int getX();
    
    // optional int32 y = 3;
    boolean hasY();
    int getY();
    
    // repeated .GameProtocol.Chunk.Node nodes = 4;
    java.util.List<gameProto.World.WorldProtos.Chunk.Node> 
        getNodesList();
    gameProto.World.WorldProtos.Chunk.Node getNodes(int index);
    int getNodesCount();
    java.util.List<? extends gameProto.World.WorldProtos.Chunk.NodeOrBuilder> 
        getNodesOrBuilderList();
    gameProto.World.WorldProtos.Chunk.NodeOrBuilder getNodesOrBuilder(
        int index);
  }
  public static final class Chunk extends
      com.google.protobuf.GeneratedMessage
      implements ChunkOrBuilder {
    // Use Chunk.newBuilder() to construct.
    private Chunk(Builder builder) {
      super(builder);
    }
    private Chunk(boolean noInit) {}
    
    private static final Chunk defaultInstance;
    public static Chunk getDefaultInstance() {
      return defaultInstance;
    }
    
    public Chunk getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gameProto.World.WorldProtos.internal_static_GameProtocol_Chunk_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gameProto.World.WorldProtos.internal_static_GameProtocol_Chunk_fieldAccessorTable;
    }
    
    public interface NodeOrBuilder
        extends com.google.protobuf.MessageOrBuilder {
      
      // required int32 type = 1;
      boolean hasType();
      int getType();
      
      // optional int32 x = 2;
      boolean hasX();
      int getX();
      
      // optional int32 y = 3;
      boolean hasY();
      int getY();
    }
    public static final class Node extends
        com.google.protobuf.GeneratedMessage
        implements NodeOrBuilder {
      // Use Node.newBuilder() to construct.
      private Node(Builder builder) {
        super(builder);
      }
      private Node(boolean noInit) {}
      
      private static final Node defaultInstance;
      public static Node getDefaultInstance() {
        return defaultInstance;
      }
      
      public Node getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gameProto.World.WorldProtos.internal_static_GameProtocol_Chunk_Node_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gameProto.World.WorldProtos.internal_static_GameProtocol_Chunk_Node_fieldAccessorTable;
      }
      
      private int bitField0_;
      // required int32 type = 1;
      public static final int TYPE_FIELD_NUMBER = 1;
      private int type_;
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getType() {
        return type_;
      }
      
      // optional int32 x = 2;
      public static final int X_FIELD_NUMBER = 2;
      private int x_;
      public boolean hasX() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getX() {
        return x_;
      }
      
      // optional int32 y = 3;
      public static final int Y_FIELD_NUMBER = 3;
      private int y_;
      public boolean hasY() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public int getY() {
        return y_;
      }
      
      private void initFields() {
        type_ = 0;
        x_ = 0;
        y_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;
        
        if (!hasType()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, type_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt32(2, x_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeInt32(3, y_);
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, type_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, x_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, y_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }
      
      public static gameProto.World.WorldProtos.Chunk.Node parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static gameProto.World.WorldProtos.Chunk.Node parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static gameProto.World.WorldProtos.Chunk.Node parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static gameProto.World.WorldProtos.Chunk.Node parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static gameProto.World.WorldProtos.Chunk.Node parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static gameProto.World.WorldProtos.Chunk.Node parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static gameProto.World.WorldProtos.Chunk.Node parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static gameProto.World.WorldProtos.Chunk.Node parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static gameProto.World.WorldProtos.Chunk.Node parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static gameProto.World.WorldProtos.Chunk.Node parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(gameProto.World.WorldProtos.Chunk.Node prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements gameProto.World.WorldProtos.Chunk.NodeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return gameProto.World.WorldProtos.internal_static_GameProtocol_Chunk_Node_descriptor;
        }
        
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return gameProto.World.WorldProtos.internal_static_GameProtocol_Chunk_Node_fieldAccessorTable;
        }
        
        // Construct using gameProto.World.WorldProtos.Chunk.Node.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }
        
        private Builder(BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }
        
        public Builder clear() {
          super.clear();
          type_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          x_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          y_ = 0;
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return gameProto.World.WorldProtos.Chunk.Node.getDescriptor();
        }
        
        public gameProto.World.WorldProtos.Chunk.Node getDefaultInstanceForType() {
          return gameProto.World.WorldProtos.Chunk.Node.getDefaultInstance();
        }
        
        public gameProto.World.WorldProtos.Chunk.Node build() {
          gameProto.World.WorldProtos.Chunk.Node result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }
        
        private gameProto.World.WorldProtos.Chunk.Node buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          gameProto.World.WorldProtos.Chunk.Node result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return result;
        }
        
        public gameProto.World.WorldProtos.Chunk.Node buildPartial() {
          gameProto.World.WorldProtos.Chunk.Node result = new gameProto.World.WorldProtos.Chunk.Node(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.type_ = type_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.x_ = x_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.y_ = y_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof gameProto.World.WorldProtos.Chunk.Node) {
            return mergeFrom((gameProto.World.WorldProtos.Chunk.Node)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(gameProto.World.WorldProtos.Chunk.Node other) {
          if (other == gameProto.World.WorldProtos.Chunk.Node.getDefaultInstance()) return this;
          if (other.hasType()) {
            setType(other.getType());
          }
          if (other.hasX()) {
            setX(other.getX());
          }
          if (other.hasY()) {
            setY(other.getY());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public final boolean isInitialized() {
          if (!hasType()) {
            
            return false;
          }
          return true;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  onChanged();
                  return this;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                type_ = input.readInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                x_ = input.readInt32();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                y_ = input.readInt32();
                break;
              }
            }
          }
        }
        
        private int bitField0_;
        
        // required int32 type = 1;
        private int type_ ;
        public boolean hasType() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        public int getType() {
          return type_;
        }
        public Builder setType(int value) {
          bitField0_ |= 0x00000001;
          type_ = value;
          onChanged();
          return this;
        }
        public Builder clearType() {
          bitField0_ = (bitField0_ & ~0x00000001);
          type_ = 0;
          onChanged();
          return this;
        }
        
        // optional int32 x = 2;
        private int x_ ;
        public boolean hasX() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        public int getX() {
          return x_;
        }
        public Builder setX(int value) {
          bitField0_ |= 0x00000002;
          x_ = value;
          onChanged();
          return this;
        }
        public Builder clearX() {
          bitField0_ = (bitField0_ & ~0x00000002);
          x_ = 0;
          onChanged();
          return this;
        }
        
        // optional int32 y = 3;
        private int y_ ;
        public boolean hasY() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        public int getY() {
          return y_;
        }
        public Builder setY(int value) {
          bitField0_ |= 0x00000004;
          y_ = value;
          onChanged();
          return this;
        }
        public Builder clearY() {
          bitField0_ = (bitField0_ & ~0x00000004);
          y_ = 0;
          onChanged();
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:GameProtocol.Chunk.Node)
      }
      
      static {
        defaultInstance = new Node(true);
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:GameProtocol.Chunk.Node)
    }
    
    private int bitField0_;
    // required int32 id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getId() {
      return id_;
    }
    
    // optional int32 x = 2;
    public static final int X_FIELD_NUMBER = 2;
    private int x_;
    public boolean hasX() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public int getX() {
      return x_;
    }
    
    // optional int32 y = 3;
    public static final int Y_FIELD_NUMBER = 3;
    private int y_;
    public boolean hasY() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public int getY() {
      return y_;
    }
    
    // repeated .GameProtocol.Chunk.Node nodes = 4;
    public static final int NODES_FIELD_NUMBER = 4;
    private java.util.List<gameProto.World.WorldProtos.Chunk.Node> nodes_;
    public java.util.List<gameProto.World.WorldProtos.Chunk.Node> getNodesList() {
      return nodes_;
    }
    public java.util.List<? extends gameProto.World.WorldProtos.Chunk.NodeOrBuilder> 
        getNodesOrBuilderList() {
      return nodes_;
    }
    public int getNodesCount() {
      return nodes_.size();
    }
    public gameProto.World.WorldProtos.Chunk.Node getNodes(int index) {
      return nodes_.get(index);
    }
    public gameProto.World.WorldProtos.Chunk.NodeOrBuilder getNodesOrBuilder(
        int index) {
      return nodes_.get(index);
    }
    
    private void initFields() {
      id_ = 0;
      x_ = 0;
      y_ = 0;
      nodes_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getNodesCount(); i++) {
        if (!getNodes(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, x_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, y_);
      }
      for (int i = 0; i < nodes_.size(); i++) {
        output.writeMessage(4, nodes_.get(i));
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, x_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, y_);
      }
      for (int i = 0; i < nodes_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, nodes_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static gameProto.World.WorldProtos.Chunk parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static gameProto.World.WorldProtos.Chunk parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static gameProto.World.WorldProtos.Chunk parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static gameProto.World.WorldProtos.Chunk parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static gameProto.World.WorldProtos.Chunk parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static gameProto.World.WorldProtos.Chunk parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static gameProto.World.WorldProtos.Chunk parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static gameProto.World.WorldProtos.Chunk parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static gameProto.World.WorldProtos.Chunk parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static gameProto.World.WorldProtos.Chunk parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(gameProto.World.WorldProtos.Chunk prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements gameProto.World.WorldProtos.ChunkOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gameProto.World.WorldProtos.internal_static_GameProtocol_Chunk_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gameProto.World.WorldProtos.internal_static_GameProtocol_Chunk_fieldAccessorTable;
      }
      
      // Construct using gameProto.World.WorldProtos.Chunk.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getNodesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        x_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        y_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (nodesBuilder_ == null) {
          nodes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          nodesBuilder_.clear();
        }
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gameProto.World.WorldProtos.Chunk.getDescriptor();
      }
      
      public gameProto.World.WorldProtos.Chunk getDefaultInstanceForType() {
        return gameProto.World.WorldProtos.Chunk.getDefaultInstance();
      }
      
      public gameProto.World.WorldProtos.Chunk build() {
        gameProto.World.WorldProtos.Chunk result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private gameProto.World.WorldProtos.Chunk buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        gameProto.World.WorldProtos.Chunk result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public gameProto.World.WorldProtos.Chunk buildPartial() {
        gameProto.World.WorldProtos.Chunk result = new gameProto.World.WorldProtos.Chunk(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.y_ = y_;
        if (nodesBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            nodes_ = java.util.Collections.unmodifiableList(nodes_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.nodes_ = nodes_;
        } else {
          result.nodes_ = nodesBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gameProto.World.WorldProtos.Chunk) {
          return mergeFrom((gameProto.World.WorldProtos.Chunk)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(gameProto.World.WorldProtos.Chunk other) {
        if (other == gameProto.World.WorldProtos.Chunk.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        if (nodesBuilder_ == null) {
          if (!other.nodes_.isEmpty()) {
            if (nodes_.isEmpty()) {
              nodes_ = other.nodes_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureNodesIsMutable();
              nodes_.addAll(other.nodes_);
            }
            onChanged();
          }
        } else {
          if (!other.nodes_.isEmpty()) {
            if (nodesBuilder_.isEmpty()) {
              nodesBuilder_.dispose();
              nodesBuilder_ = null;
              nodes_ = other.nodes_;
              bitField0_ = (bitField0_ & ~0x00000008);
              nodesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getNodesFieldBuilder() : null;
            } else {
              nodesBuilder_.addAllMessages(other.nodes_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        for (int i = 0; i < getNodesCount(); i++) {
          if (!getNodes(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              x_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              y_ = input.readInt32();
              break;
            }
            case 34: {
              gameProto.World.WorldProtos.Chunk.Node.Builder subBuilder = gameProto.World.WorldProtos.Chunk.Node.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addNodes(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required int32 id = 1;
      private int id_ ;
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getId() {
        return id_;
      }
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 x = 2;
      private int x_ ;
      public boolean hasX() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getX() {
        return x_;
      }
      public Builder setX(int value) {
        bitField0_ |= 0x00000002;
        x_ = value;
        onChanged();
        return this;
      }
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000002);
        x_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 y = 3;
      private int y_ ;
      public boolean hasY() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public int getY() {
        return y_;
      }
      public Builder setY(int value) {
        bitField0_ |= 0x00000004;
        y_ = value;
        onChanged();
        return this;
      }
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000004);
        y_ = 0;
        onChanged();
        return this;
      }
      
      // repeated .GameProtocol.Chunk.Node nodes = 4;
      private java.util.List<gameProto.World.WorldProtos.Chunk.Node> nodes_ =
        java.util.Collections.emptyList();
      private void ensureNodesIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          nodes_ = new java.util.ArrayList<gameProto.World.WorldProtos.Chunk.Node>(nodes_);
          bitField0_ |= 0x00000008;
         }
      }
      
      private com.google.protobuf.RepeatedFieldBuilder<
          gameProto.World.WorldProtos.Chunk.Node, gameProto.World.WorldProtos.Chunk.Node.Builder, gameProto.World.WorldProtos.Chunk.NodeOrBuilder> nodesBuilder_;
      
      public java.util.List<gameProto.World.WorldProtos.Chunk.Node> getNodesList() {
        if (nodesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(nodes_);
        } else {
          return nodesBuilder_.getMessageList();
        }
      }
      public int getNodesCount() {
        if (nodesBuilder_ == null) {
          return nodes_.size();
        } else {
          return nodesBuilder_.getCount();
        }
      }
      public gameProto.World.WorldProtos.Chunk.Node getNodes(int index) {
        if (nodesBuilder_ == null) {
          return nodes_.get(index);
        } else {
          return nodesBuilder_.getMessage(index);
        }
      }
      public Builder setNodes(
          int index, gameProto.World.WorldProtos.Chunk.Node value) {
        if (nodesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNodesIsMutable();
          nodes_.set(index, value);
          onChanged();
        } else {
          nodesBuilder_.setMessage(index, value);
        }
        return this;
      }
      public Builder setNodes(
          int index, gameProto.World.WorldProtos.Chunk.Node.Builder builderForValue) {
        if (nodesBuilder_ == null) {
          ensureNodesIsMutable();
          nodes_.set(index, builderForValue.build());
          onChanged();
        } else {
          nodesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addNodes(gameProto.World.WorldProtos.Chunk.Node value) {
        if (nodesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNodesIsMutable();
          nodes_.add(value);
          onChanged();
        } else {
          nodesBuilder_.addMessage(value);
        }
        return this;
      }
      public Builder addNodes(
          int index, gameProto.World.WorldProtos.Chunk.Node value) {
        if (nodesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNodesIsMutable();
          nodes_.add(index, value);
          onChanged();
        } else {
          nodesBuilder_.addMessage(index, value);
        }
        return this;
      }
      public Builder addNodes(
          gameProto.World.WorldProtos.Chunk.Node.Builder builderForValue) {
        if (nodesBuilder_ == null) {
          ensureNodesIsMutable();
          nodes_.add(builderForValue.build());
          onChanged();
        } else {
          nodesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      public Builder addNodes(
          int index, gameProto.World.WorldProtos.Chunk.Node.Builder builderForValue) {
        if (nodesBuilder_ == null) {
          ensureNodesIsMutable();
          nodes_.add(index, builderForValue.build());
          onChanged();
        } else {
          nodesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addAllNodes(
          java.lang.Iterable<? extends gameProto.World.WorldProtos.Chunk.Node> values) {
        if (nodesBuilder_ == null) {
          ensureNodesIsMutable();
          super.addAll(values, nodes_);
          onChanged();
        } else {
          nodesBuilder_.addAllMessages(values);
        }
        return this;
      }
      public Builder clearNodes() {
        if (nodesBuilder_ == null) {
          nodes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          nodesBuilder_.clear();
        }
        return this;
      }
      public Builder removeNodes(int index) {
        if (nodesBuilder_ == null) {
          ensureNodesIsMutable();
          nodes_.remove(index);
          onChanged();
        } else {
          nodesBuilder_.remove(index);
        }
        return this;
      }
      public gameProto.World.WorldProtos.Chunk.Node.Builder getNodesBuilder(
          int index) {
        return getNodesFieldBuilder().getBuilder(index);
      }
      public gameProto.World.WorldProtos.Chunk.NodeOrBuilder getNodesOrBuilder(
          int index) {
        if (nodesBuilder_ == null) {
          return nodes_.get(index);  } else {
          return nodesBuilder_.getMessageOrBuilder(index);
        }
      }
      public java.util.List<? extends gameProto.World.WorldProtos.Chunk.NodeOrBuilder> 
           getNodesOrBuilderList() {
        if (nodesBuilder_ != null) {
          return nodesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(nodes_);
        }
      }
      public gameProto.World.WorldProtos.Chunk.Node.Builder addNodesBuilder() {
        return getNodesFieldBuilder().addBuilder(
            gameProto.World.WorldProtos.Chunk.Node.getDefaultInstance());
      }
      public gameProto.World.WorldProtos.Chunk.Node.Builder addNodesBuilder(
          int index) {
        return getNodesFieldBuilder().addBuilder(
            index, gameProto.World.WorldProtos.Chunk.Node.getDefaultInstance());
      }
      public java.util.List<gameProto.World.WorldProtos.Chunk.Node.Builder> 
           getNodesBuilderList() {
        return getNodesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          gameProto.World.WorldProtos.Chunk.Node, gameProto.World.WorldProtos.Chunk.Node.Builder, gameProto.World.WorldProtos.Chunk.NodeOrBuilder> 
          getNodesFieldBuilder() {
        if (nodesBuilder_ == null) {
          nodesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              gameProto.World.WorldProtos.Chunk.Node, gameProto.World.WorldProtos.Chunk.Node.Builder, gameProto.World.WorldProtos.Chunk.NodeOrBuilder>(
                  nodes_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          nodes_ = null;
        }
        return nodesBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:GameProtocol.Chunk)
    }
    
    static {
      defaultInstance = new Chunk(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:GameProtocol.Chunk)
  }
  
  public interface WorldOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // repeated .GameProtocol.Chunk chunks = 1;
    java.util.List<gameProto.World.WorldProtos.Chunk> 
        getChunksList();
    gameProto.World.WorldProtos.Chunk getChunks(int index);
    int getChunksCount();
    java.util.List<? extends gameProto.World.WorldProtos.ChunkOrBuilder> 
        getChunksOrBuilderList();
    gameProto.World.WorldProtos.ChunkOrBuilder getChunksOrBuilder(
        int index);
  }
  public static final class World extends
      com.google.protobuf.GeneratedMessage
      implements WorldOrBuilder {
    // Use World.newBuilder() to construct.
    private World(Builder builder) {
      super(builder);
    }
    private World(boolean noInit) {}
    
    private static final World defaultInstance;
    public static World getDefaultInstance() {
      return defaultInstance;
    }
    
    public World getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gameProto.World.WorldProtos.internal_static_GameProtocol_World_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gameProto.World.WorldProtos.internal_static_GameProtocol_World_fieldAccessorTable;
    }
    
    // repeated .GameProtocol.Chunk chunks = 1;
    public static final int CHUNKS_FIELD_NUMBER = 1;
    private java.util.List<gameProto.World.WorldProtos.Chunk> chunks_;
    public java.util.List<gameProto.World.WorldProtos.Chunk> getChunksList() {
      return chunks_;
    }
    public java.util.List<? extends gameProto.World.WorldProtos.ChunkOrBuilder> 
        getChunksOrBuilderList() {
      return chunks_;
    }
    public int getChunksCount() {
      return chunks_.size();
    }
    public gameProto.World.WorldProtos.Chunk getChunks(int index) {
      return chunks_.get(index);
    }
    public gameProto.World.WorldProtos.ChunkOrBuilder getChunksOrBuilder(
        int index) {
      return chunks_.get(index);
    }
    
    private void initFields() {
      chunks_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      for (int i = 0; i < getChunksCount(); i++) {
        if (!getChunks(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < chunks_.size(); i++) {
        output.writeMessage(1, chunks_.get(i));
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (int i = 0; i < chunks_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, chunks_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static gameProto.World.WorldProtos.World parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static gameProto.World.WorldProtos.World parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static gameProto.World.WorldProtos.World parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static gameProto.World.WorldProtos.World parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static gameProto.World.WorldProtos.World parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static gameProto.World.WorldProtos.World parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static gameProto.World.WorldProtos.World parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static gameProto.World.WorldProtos.World parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static gameProto.World.WorldProtos.World parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static gameProto.World.WorldProtos.World parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(gameProto.World.WorldProtos.World prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements gameProto.World.WorldProtos.WorldOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gameProto.World.WorldProtos.internal_static_GameProtocol_World_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gameProto.World.WorldProtos.internal_static_GameProtocol_World_fieldAccessorTable;
      }
      
      // Construct using gameProto.World.WorldProtos.World.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getChunksFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (chunksBuilder_ == null) {
          chunks_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          chunksBuilder_.clear();
        }
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gameProto.World.WorldProtos.World.getDescriptor();
      }
      
      public gameProto.World.WorldProtos.World getDefaultInstanceForType() {
        return gameProto.World.WorldProtos.World.getDefaultInstance();
      }
      
      public gameProto.World.WorldProtos.World build() {
        gameProto.World.WorldProtos.World result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private gameProto.World.WorldProtos.World buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        gameProto.World.WorldProtos.World result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public gameProto.World.WorldProtos.World buildPartial() {
        gameProto.World.WorldProtos.World result = new gameProto.World.WorldProtos.World(this);
        int from_bitField0_ = bitField0_;
        if (chunksBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            chunks_ = java.util.Collections.unmodifiableList(chunks_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.chunks_ = chunks_;
        } else {
          result.chunks_ = chunksBuilder_.build();
        }
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gameProto.World.WorldProtos.World) {
          return mergeFrom((gameProto.World.WorldProtos.World)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(gameProto.World.WorldProtos.World other) {
        if (other == gameProto.World.WorldProtos.World.getDefaultInstance()) return this;
        if (chunksBuilder_ == null) {
          if (!other.chunks_.isEmpty()) {
            if (chunks_.isEmpty()) {
              chunks_ = other.chunks_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureChunksIsMutable();
              chunks_.addAll(other.chunks_);
            }
            onChanged();
          }
        } else {
          if (!other.chunks_.isEmpty()) {
            if (chunksBuilder_.isEmpty()) {
              chunksBuilder_.dispose();
              chunksBuilder_ = null;
              chunks_ = other.chunks_;
              bitField0_ = (bitField0_ & ~0x00000001);
              chunksBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getChunksFieldBuilder() : null;
            } else {
              chunksBuilder_.addAllMessages(other.chunks_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        for (int i = 0; i < getChunksCount(); i++) {
          if (!getChunks(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              gameProto.World.WorldProtos.Chunk.Builder subBuilder = gameProto.World.WorldProtos.Chunk.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addChunks(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // repeated .GameProtocol.Chunk chunks = 1;
      private java.util.List<gameProto.World.WorldProtos.Chunk> chunks_ =
        java.util.Collections.emptyList();
      private void ensureChunksIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          chunks_ = new java.util.ArrayList<gameProto.World.WorldProtos.Chunk>(chunks_);
          bitField0_ |= 0x00000001;
         }
      }
      
      private com.google.protobuf.RepeatedFieldBuilder<
          gameProto.World.WorldProtos.Chunk, gameProto.World.WorldProtos.Chunk.Builder, gameProto.World.WorldProtos.ChunkOrBuilder> chunksBuilder_;
      
      public java.util.List<gameProto.World.WorldProtos.Chunk> getChunksList() {
        if (chunksBuilder_ == null) {
          return java.util.Collections.unmodifiableList(chunks_);
        } else {
          return chunksBuilder_.getMessageList();
        }
      }
      public int getChunksCount() {
        if (chunksBuilder_ == null) {
          return chunks_.size();
        } else {
          return chunksBuilder_.getCount();
        }
      }
      public gameProto.World.WorldProtos.Chunk getChunks(int index) {
        if (chunksBuilder_ == null) {
          return chunks_.get(index);
        } else {
          return chunksBuilder_.getMessage(index);
        }
      }
      public Builder setChunks(
          int index, gameProto.World.WorldProtos.Chunk value) {
        if (chunksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChunksIsMutable();
          chunks_.set(index, value);
          onChanged();
        } else {
          chunksBuilder_.setMessage(index, value);
        }
        return this;
      }
      public Builder setChunks(
          int index, gameProto.World.WorldProtos.Chunk.Builder builderForValue) {
        if (chunksBuilder_ == null) {
          ensureChunksIsMutable();
          chunks_.set(index, builderForValue.build());
          onChanged();
        } else {
          chunksBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addChunks(gameProto.World.WorldProtos.Chunk value) {
        if (chunksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChunksIsMutable();
          chunks_.add(value);
          onChanged();
        } else {
          chunksBuilder_.addMessage(value);
        }
        return this;
      }
      public Builder addChunks(
          int index, gameProto.World.WorldProtos.Chunk value) {
        if (chunksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChunksIsMutable();
          chunks_.add(index, value);
          onChanged();
        } else {
          chunksBuilder_.addMessage(index, value);
        }
        return this;
      }
      public Builder addChunks(
          gameProto.World.WorldProtos.Chunk.Builder builderForValue) {
        if (chunksBuilder_ == null) {
          ensureChunksIsMutable();
          chunks_.add(builderForValue.build());
          onChanged();
        } else {
          chunksBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      public Builder addChunks(
          int index, gameProto.World.WorldProtos.Chunk.Builder builderForValue) {
        if (chunksBuilder_ == null) {
          ensureChunksIsMutable();
          chunks_.add(index, builderForValue.build());
          onChanged();
        } else {
          chunksBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addAllChunks(
          java.lang.Iterable<? extends gameProto.World.WorldProtos.Chunk> values) {
        if (chunksBuilder_ == null) {
          ensureChunksIsMutable();
          super.addAll(values, chunks_);
          onChanged();
        } else {
          chunksBuilder_.addAllMessages(values);
        }
        return this;
      }
      public Builder clearChunks() {
        if (chunksBuilder_ == null) {
          chunks_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          chunksBuilder_.clear();
        }
        return this;
      }
      public Builder removeChunks(int index) {
        if (chunksBuilder_ == null) {
          ensureChunksIsMutable();
          chunks_.remove(index);
          onChanged();
        } else {
          chunksBuilder_.remove(index);
        }
        return this;
      }
      public gameProto.World.WorldProtos.Chunk.Builder getChunksBuilder(
          int index) {
        return getChunksFieldBuilder().getBuilder(index);
      }
      public gameProto.World.WorldProtos.ChunkOrBuilder getChunksOrBuilder(
          int index) {
        if (chunksBuilder_ == null) {
          return chunks_.get(index);  } else {
          return chunksBuilder_.getMessageOrBuilder(index);
        }
      }
      public java.util.List<? extends gameProto.World.WorldProtos.ChunkOrBuilder> 
           getChunksOrBuilderList() {
        if (chunksBuilder_ != null) {
          return chunksBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(chunks_);
        }
      }
      public gameProto.World.WorldProtos.Chunk.Builder addChunksBuilder() {
        return getChunksFieldBuilder().addBuilder(
            gameProto.World.WorldProtos.Chunk.getDefaultInstance());
      }
      public gameProto.World.WorldProtos.Chunk.Builder addChunksBuilder(
          int index) {
        return getChunksFieldBuilder().addBuilder(
            index, gameProto.World.WorldProtos.Chunk.getDefaultInstance());
      }
      public java.util.List<gameProto.World.WorldProtos.Chunk.Builder> 
           getChunksBuilderList() {
        return getChunksFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          gameProto.World.WorldProtos.Chunk, gameProto.World.WorldProtos.Chunk.Builder, gameProto.World.WorldProtos.ChunkOrBuilder> 
          getChunksFieldBuilder() {
        if (chunksBuilder_ == null) {
          chunksBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              gameProto.World.WorldProtos.Chunk, gameProto.World.WorldProtos.Chunk.Builder, gameProto.World.WorldProtos.ChunkOrBuilder>(
                  chunks_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          chunks_ = null;
        }
        return chunksBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:GameProtocol.World)
    }
    
    static {
      defaultInstance = new World(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:GameProtocol.World)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_GameProtocol_Chunk_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_GameProtocol_Chunk_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_GameProtocol_Chunk_Node_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_GameProtocol_Chunk_Node_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_GameProtocol_World_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_GameProtocol_World_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\013World.proto\022\014GameProtocol\"~\n\005Chunk\022\n\n\002" +
      "id\030\001 \002(\005\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\022\'\n\005nodes\030" +
      "\004 \003(\0132\030.GameProtocol.Chunk.Node\032*\n\004Node\022" +
      "\014\n\004type\030\001 \002(\005\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\",\n\005W" +
      "orld\022#\n\006chunks\030\001 \003(\0132\023.GameProtocol.Chun" +
      "kB\036\n\017gameProto.WorldB\013WorldProtos"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_GameProtocol_Chunk_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_GameProtocol_Chunk_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_GameProtocol_Chunk_descriptor,
              new java.lang.String[] { "Id", "X", "Y", "Nodes", },
              gameProto.World.WorldProtos.Chunk.class,
              gameProto.World.WorldProtos.Chunk.Builder.class);
          internal_static_GameProtocol_Chunk_Node_descriptor =
            internal_static_GameProtocol_Chunk_descriptor.getNestedTypes().get(0);
          internal_static_GameProtocol_Chunk_Node_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_GameProtocol_Chunk_Node_descriptor,
              new java.lang.String[] { "Type", "X", "Y", },
              gameProto.World.WorldProtos.Chunk.Node.class,
              gameProto.World.WorldProtos.Chunk.Node.Builder.class);
          internal_static_GameProtocol_World_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_GameProtocol_World_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_GameProtocol_World_descriptor,
              new java.lang.String[] { "Chunks", },
              gameProto.World.WorldProtos.World.class,
              gameProto.World.WorldProtos.World.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
